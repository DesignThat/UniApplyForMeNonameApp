import React, { useState, useRef } from 'react';
import { FileText, Download, Code, Eye } from 'lucide-react';
import { jsPDF } from 'jspdf';
import html2canvas from 'html2canvas';

interface FileViewerProps {
  file: File;
  content: string;
  onClose: () => void;
}

export function FileViewer({ file, content, onClose }: FileViewerProps) {
  const [viewMode, setViewMode] = useState<'rendered' | 'source'>('rendered');
  const [isGenerating, setIsGenerating] = useState(false);
  const contentRef = useRef<HTMLDivElement>(null);

  const convertToPDF = async () => {
    if (!contentRef.current) return;
    setIsGenerating(true);

    try {
      const pdf = new jsPDF('p', 'mm', 'a4');
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();

      // Set PDF metadata
      const fileName = file.name || 'noname';
      pdf.setProperties({
        title: `${fileName} - UniApplyForMe UNISA Noname Viewer`,
        subject: 'UNISA Noname File Conversion',
        author: 'UniApplyForMe',
        creator: 'UniApplyForMe UNISA Noname Viewer',
        producer: 'UniApplyForMe'
      });

      // Create a temporary div for rendering
      const tempDiv = document.createElement('div');
      tempDiv.innerHTML = content;
      tempDiv.style.width = '800px';
      tempDiv.style.padding = '20px';
      document.body.appendChild(tempDiv);

      // Capture the content
      const canvas = await html2canvas(tempDiv, {
        scale: 2,
        useCORS: true,
        logging: false,
        backgroundColor: '#ffffff'
      });

      document.body.removeChild(tempDiv);

      // Calculate dimensions
      const imgWidth = pageWidth - 20;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;

      // Add the content
      pdf.addImage(canvas.toDataURL('image/png'), 'PNG', 10, 10, imgWidth, imgHeight);

      // Add footer
      const footerY = pageHeight - 15;
      
      // Add footer text
      pdf.setFontSize(10);
      pdf.setTextColor(22, 166, 55); // #16a637
      pdf.text('Generated by UniApplyForMe', 10, footerY);
      pdf.setTextColor(9, 94, 65); // #095e41
      pdf.text('apply.org.za', pageWidth - 30, footerY);

      // Save the PDF
      pdf.save(`${file.name || 'document'}.pdf`);
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Failed to generate PDF. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <div className="w-full bg-white rounded-lg shadow-lg p-4 sm:p-6">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6">
        <div className="flex items-center">
          <FileText className="w-5 h-5 sm:w-6 sm:h-6 text-primary mr-2 sm:mr-3 flex-shrink-0" />
          <h2 className="text-lg sm:text-xl font-semibold text-secondary truncate">
            File Preview: {file.name}
          </h2>
        </div>
        <div className="flex flex-wrap gap-2 sm:gap-3">
          <div className="flex bg-gray-100 rounded-lg p-1">
            <button
              onClick={() => setViewMode('rendered')}
              className={`flex items-center px-2 sm:px-3 py-1 rounded-md text-sm transition-colors ${
                viewMode === 'rendered'
                  ? 'bg-white shadow-sm text-primary'
                  : 'text-gray-600 hover:text-gray-800'
              }`}
            >
              <Eye className="w-4 h-4 mr-1 sm:mr-2" />
              <span className="hidden sm:inline">Preview</span>
            </button>
            <button
              onClick={() => setViewMode('source')}
              className={`flex items-center px-2 sm:px-3 py-1 rounded-md text-sm transition-colors ${
                viewMode === 'source'
                  ? 'bg-white shadow-sm text-primary'
                  : 'text-gray-600 hover:text-gray-800'
              }`}
            >
              <Code className="w-4 h-4 mr-1 sm:mr-2" />
              <span className="hidden sm:inline">Source</span>
            </button>
          </div>
          <button
            onClick={convertToPDF}
            disabled={isGenerating}
            className={`flex items-center px-3 sm:px-4 py-1.5 sm:py-2 bg-primary text-white rounded-lg text-sm transition-colors ${
              isGenerating ? 'opacity-50 cursor-not-allowed' : 'hover:bg-primary/90'
            }`}
          >
            <Download className="w-4 h-4 mr-1 sm:mr-2" />
            {isGenerating ? 'Generating...' : 'Convert to PDF'}
          </button>
          <button
            onClick={onClose}
            className="px-3 sm:px-4 py-1.5 sm:py-2 text-sm text-gray-600 hover:text-gray-800 transition-colors"
          >
            Close
          </button>
        </div>
      </div>

      <div ref={contentRef} className="bg-gray-50 rounded-lg p-3 sm:p-4 max-h-[60vh] overflow-auto">
        {viewMode === 'source' ? (
          <pre className="whitespace-pre-wrap font-mono text-xs sm:text-sm text-gray-700">
            {content}
          </pre>
        ) : (
          <div
            className="prose max-w-none prose-sm sm:prose-base"
            dangerouslySetInnerHTML={{ __html: content }}
          />
        )}
      </div>
    </div>
  );
}